Section: Part 1
fox01:~/cs3733/assign4> gcc -o a4p1 assign4-part1.c -pthread
fox01:~/cs3733/assign4> a4p1 5
Sam Dash
Assignment 4: # of threads = 5
This is philosopher 0
This is philosopher 1
This is philosopher 2
This is philosopher 3
This is philosopher 4
This is philosopher 5
5 threads have been completed successfully!

fox01:~/cs3733/assign4> a4p1 20
Sam Dash
Assignment 4: # of threads = 20
This is philosopher 0
This is philosopher 1
This is philosopher 2
This is philosopher 3
This is philosopher 4
This is philosopher 5
This is philosopher 6
This is philosopher 7
This is philosopher 8
This is philosopher 9
This is philosopher 10
This is philosopher 11
This is philosopher 12
This is philosopher 13
This is philosopher 14
This is philosopher 15
This is philosopher 16
This is philosopher 17
This is philosopher 18
This is philosopher 19
This is philosopher 20
20 threads have been completed successfully!

I implemented pthread_join in the main program within a for loop
for(i=0; i <= nthreads; ++i) {
      pthread_join(tid[i], NULL);
    }

Section: Part 2
fox01:~/cs3733/assign4> gcc -o a4p2 assign4-part2.c -pthread
fox01:~/cs3733/assign4> a4p2 5
Sam Dash
Assignment 4: # of threads = 5
Philosopher 1 thinks for 2 seconds
Philosopher 2 thinks for 0 seconds
Philosopher 2 has picked up chopsticks
Philosopher 2 eats for 0 seconds
Philosopher 2 has finished eating
Philosopher 3 thinks for 2 seconds
Philosopher 4 thinks for 0 seconds
Philosopher 4 has picked up chopsticks
Philosopher 4 eats for 1 seconds
Philosopher 5 thinks for 1 seconds
Philosopher 4 has finished eating
Philosopher 5 has picked up chopsticks
Philosopher 5 eats for 0 seconds
Philosopher 5 has finished eating
Philosopher 1 has picked up chopsticks
Philosopher 1 eats for 4 seconds
Philosopher 3 has picked up chopsticks
Philosopher 3 eats for 1 seconds
Philosopher 3 has finished eating
Philosopher 1 has finished eating

fox01:~/cs3733/assign4> a4p2 20
Sam Dash
Assignment 4: # of threads = 20
Philosopher 1 thinks for 8 seconds
Philosopher 2 thinks for 1 seconds
Philosopher 3 thinks for 2 seconds
Philosopher 4 thinks for 9 seconds
Philosopher 5 thinks for 12 seconds
Philosopher 6 thinks for 15 seconds
Philosopher 7 thinks for 13 seconds
Philosopher 8 thinks for 6 seconds
Philosopher 9 thinks for 6 seconds
Philosopher 10 thinks for 14 seconds
Philosopher 11 thinks for 1 seconds
Philosopher 12 thinks for 9 seconds
Philosopher 13 thinks for 16 seconds
Philosopher 14 thinks for 14 seconds
Philosopher 15 thinks for 4 seconds
Philosopher 16 thinks for 3 seconds
Philosopher 17 thinks for 14 seconds
Philosopher 18 thinks for 9 seconds
Philosopher 19 thinks for 4 seconds
Philosopher 20 thinks for 7 seconds
Philosopher 2 has picked up chopsticks
Philosopher 2 eats for 10 seconds
Philosopher 11 has picked up chopsticks
Philosopher 11 eats for 8 seconds
Philosopher 16 has picked up chopsticks
Philosopher 16 eats for 0 seconds
Philosopher 16 has finished eating
Philosopher 15 has picked up chopsticks
Philosopher 15 eats for 1 seconds
Philosopher 19 has picked up chopsticks
Philosopher 19 eats for 16 seconds
Philosopher 15 has finished eating
Philosopher 8 has picked up chopsticks
Philosopher 8 eats for 16 seconds
Philosopher 11 has finished eating
Philosopher 12 has picked up chopsticks
Philosopher 12 eats for 15 seconds
Philosopher 2 has finished eating
Philosopher 3 has picked up chopsticks
Philosopher 3 eats for 9 seconds
Philosopher 1 has picked up chopsticks
Philosopher 1 eats for 7 seconds
Philosopher 5 has picked up chopsticks
Philosopher 5 eats for 8 seconds
Philosopher 14 has picked up chopsticks
Philosopher 14 eats for 13 seconds
Philosopher 1 has finished eating
Philosopher 5 has finished eating
Philosopher 6 has picked up chopsticks
Philosopher 6 eats for 6 seconds
Philosopher 3 has finished eating
Philosopher 4 has picked up chopsticks
Philosopher 4 eats for 0 seconds
Philosopher 4 has finished eating
Philosopher 19 has finished eating
Philosopher 18 has picked up chopsticks
Philosopher 18 eats for 7 seconds
Philosopher 20 has picked up chopsticks
Philosopher 20 eats for 6 seconds
Philosopher 8 has finished eating
Philosopher 9 has picked up chopsticks
Philosopher 9 eats for 11 seconds
Philosopher 12 has finished eating
Philosopher 6 has finished eating
Philosopher 7 has picked up chopsticks
Philosopher 7 eats for 13 seconds
Philosopher 20 has finished eating
Philosopher 14 has finished eating
Philosopher 13 has picked up chopsticks
Philosopher 13 eats for 18 seconds
Philosopher 18 has finished eating
Philosopher 17 has picked up chopsticks
Philosopher 17 eats for 16 seconds
Philosopher 9 has finished eating
Philosopher 10 has picked up chopsticks
Philosopher 10 eats for 10 seconds
Philosopher 7 has finished eating
Philosopher 10 has finished eating
Philosopher 17 has finished eating
Philosopher 13 has finished eating

fox01:~/cs3733/assign4> seq 100 | xargs -Iz a4p2 5
0 deadlocks encountered during execution

Section: Part III
fox01:~/cs3733/assign4> gcc -o a4p3 assign4-part3.c -pthread
fox01:~/cs3733/assign4> a4p3 5
Sam Dash
Assignment 4: # of threads = 5
Philosopher 1 thinks for 1 seconds
Philosopher 2 thinks for 0 seconds
Philosopher 3 thinks for 4 seconds
Philosopher 4 thinks for 3 seconds
Philosopher 5 thinks for 2 seconds
Philosopher 1 has picked up chopsticks
Philosopher 1 eats for 4 seconds
Philosopher 1 has finished eating
Philosopher 2 has picked up chopsticks
Philosopher 2 eats for 4 seconds
Philosopher 2 has finished eating
Philosopher 3 has picked up chopsticks
Philosopher 3 eats for 0 seconds
Philosopher 3 has finished eating
Philosopher 4 has picked up chopsticks
Philosopher 4 eats for 4 seconds
Philosopher 4 has finished eating
Philosopher 5 has picked up chopsticks
Philosopher 5 eats for 4 seconds
Philosopher 5 has finished eating

fox01:~/cs3733/assign4> seq 10 | xargs -Iz a4p3 5
0 deadlocks encountered during execution

I designed the conditional variables such that they would force the thread to wait if there was a mismatch between the thread index and the next oncrement of nextIndex.
The thread would be freed if the following increment of nextIndex yielded a match.

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condvar = PTHREAD_COND_INITIALIZER;
int nextIndex = 1;
.
.
.
void *func(void *threadIndex) {
		int ti = (int)threadIndex;
		thinking(ti);
		pthread_mutex_lock(&lock);
		while(nextIndex != ti) {
			pthread_cond_wait(&condvar, &lock);
		}
 
    pickUpChopsticks(ti);
		eating(ti);
    putDownChopsticks(ti);
    nextIndex++; 
    pthread_cond_broadcast(&condvar);
    return NULL;
}

Section: Part IV
fox01:~/cs3733/assign4> gcc -o a4p4 assign4-part4.c -pthread
fox01:~/cs3733/assign4> a4p4 5
Sam Dash
Assignment 4: # of threads = 5
Philosopher 1 thinks for 1 seconds
Philosopher 2 thinks for 3 seconds
Philosopher 3 thinks for 3 seconds
Philosopher 4 thinks for 3 seconds
Philosopher 5 thinks for 0 seconds
Philosopher 5 has picked up chopsticks
Philosopher 5 eats for 2 seconds
Philosopher 5 has finished eating
Philosopher 1 has picked up chopsticks
Philosopher 1 eats for 4 seconds
Philosopher 3 has picked up chopsticks
Philosopher 3 eats for 3 seconds
Philosopher 3 has finished eating
Philosopher 4 has picked up chopsticks
Philosopher 4 eats for 2 seconds
Philosopher 1 has finished eating
Philosopher 2 has picked up chopsticks
Philosopher 2 eats for 1 seconds
Philosopher 2 has finished eating
Philosopher 4 has finished eating

fox01:~/cs3733/assign4> seq 20 | xargs -Iz a4p4 5
0 deadlocks encountered during execution

My solution for part 4 was implemented entirely within pickUpChopsticks.
I used while loops to check if the trylocks were not equal to 0. If so, the pick up was successful.
void pickUpChopsticks(int threadIndex) {
  int rc1,rc2;

	int left = (threadIndex + nthreads) % nthreads;
	int right = (threadIndex + 1) % nthreads;
	if (threadIndex & 1) {
    while (pthread_mutex_trylock(&chopsticks[right]) != 0){
    }
		while (pthread_mutex_trylock(&chopsticks[left]) != 0) {
    }
		printf("Philosopher %d has picked up chopsticks\n", threadIndex);
	}      
	else {
		while (pthread_mutex_trylock(&chopsticks[left]) != 0) {
    }   
		while (pthread_mutex_trylock(&chopsticks[right]) != 0) {
    }   
		printf("Philosopher %d has picked up chopsticks\n", threadIndex);
	}
}

1. I received help from Xueling Zhang for parts 2 and 3.
2. Yes
3. N/A
4. The most challenging part was figuring out how to lock the chopsticks so that multiple threads couldn't grab them.